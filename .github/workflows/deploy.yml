name: Deploy Streamlit App to Azure VM

on:
  push:
    branches:
      - main  # Replace with your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Check out the code
        uses: actions/checkout@v3

      # Step 2: Verify that secrets are passed correctly
      - name: Verify Secrets
        run: |
          if [ -z "${{ secrets.AZURE_VM_USERNAME }}" ]; then
            echo "Error: AZURE_VM_USERNAME is not set in GitHub Secrets"
            exit 1
          else
            echo "AZURE_VM_USERNAME is set to: ${{ secrets.AZURE_VM_USERNAME }}"
          fi
          if [ -z "${{ secrets.AZURE_VM_IP }}" ]; then
            echo "Error: AZURE_VM_IP is not set in GitHub Secrets"
            exit 1
          else
            echo "AZURE_VM_IP is set to: ${{ secrets.AZURE_VM_IP }}"
          fi
          if [ -z "${{ secrets.AZURE_VM_SSH_KEY }}" ]; then
            echo "Error: AZURE_VM_SSH_KEY is not set in GitHub Secrets"
            exit 1
          else
            echo "AZURE_VM_SSH_KEY is present and has been loaded."
          fi

      # Step 3: Set up SSH
      - name: Set up SSH
        env:
          AZURE_VM_SSH_KEY: ${{ secrets.AZURE_VM_SSH_KEY }}
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        run: |
          echo "Setting up SSH with Azure VM IP: $AZURE_VM_IP"

          # Create the .ssh directory with the right permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Save SSH private key and configure permissions
          echo "$AZURE_VM_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add the VM's IP to known_hosts to prevent SSH prompt
          ssh-keyscan -H "$AZURE_VM_IP" >> ~/.ssh/known_hosts || true

      # Step 4: Deploy application to Azure VM
      - name: Deploy to Azure VM
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
        run: |
          echo "Deploying to $AZURE_VM_USERNAME@$AZURE_VM_IP"  # Debugging step

          # Use scp to transfer application files to the VM
          scp -o StrictHostKeyChecking=no -r * $AZURE_VM_USERNAME@$AZURE_VM_IP:/home/$AZURE_VM_USERNAME/BABot_FAQ/

      # Step 5: Set up Python environment and install dependencies on the VM
      - name: Set up Python environment and install dependencies
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa $AZURE_VM_USERNAME@$AZURE_VM_IP << EOF
            # Navigate to the project directory
            cd /home/$AZURE_VM_USERNAME/BABot_FAQ

            # Remove any existing virtual environment (optional)
             rm -rf .venv

            # Create a new virtual environment
             python3 -m venv mvenv

            # Activate the virtual environment
            source mvenv/bin/activate

            # Upgrade pip
            pip install --upgrade pip

            # Install dependencies from requirements.txt
            pip install -r requirements.txt
          EOF

      # Step 6: Run Streamlit App on the VM
      - name: Run Streamlit App
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa $AZURE_VM_USERNAME@$AZURE_VM_IP << EOF
            # Navigate to the project directory
            cd /home/$AZURE_VM_USERNAME/BABot_FAQ

            # Kill any existing Streamlit process (if any)
            pkill -f streamlit || true

            # Start Streamlit app in the background
            nohup streamlit run BABot_FAQ.py --server.port=8501 &
          EOF
